//this is done in the browser console
//console.log(window)
//console.log(window.document) or console.log(document). Both serve the same purpose
//console.dir(document) gives all the methods corresponding to document


document.getElementById('title')
        <h1 id=​"title" class=​"heading">​DOM Learning​</h1>​

document.getElementById('title').id
        title

document.getElementById('title').class
        undefined

document.getElementById('title').className
        heading

document.getElementById('title').getAttribute('id')
        title

document.getElementById('title').getAttribute('className')
        null

document.getElementById('title').getAttribute('class')
        heading

document.getElementById('title').setAttribute('class', 'test')
        undefined 
        but the class attribute having value heading is overriden as test.

document.getElementById('title').setAttribute('class', 'test heading')
        undefined
        but the class attribute is set as class = 'test heading'

title.style.backgroundColor = 'green'
title.style.borderRadius = '20px'
title.style.borderRadius = '15px'
In this way, you can add style to your webpage 


-----textContent vs innerHTML vs innerText----------

title.textContent
    DOM Learning​
title.innerHTML
    DOM Learning​
title.innerText
    DOM Learning​

if you add a span tag and add some content and make the display of the content none, then
- by using innerText, the content that is hiddem or styled using display is not show in output
    title.innerText
        'DOM Learning'

- by using textContent, even though text is hidden and display is none, the entire content is shown in output
    title.textContent
        'DOM Learning test text'
- by using innerHTML, even the HTML elements are shown. In this case, the span tag and its contents
    title.innerHTML
        'DOM Learning <span style="display: none;">test text</span>'



---------------------------------------------------------------------------------------------------------------


There are two ways of creating attributes for a particular element.
This is mainly done after creating an element using .createElement

The two ways are as follows:
Firstly, create an element, let's say, div
1. Now, you can create an attribute using . as div.className = 'main' and so on 
2. Also, you can use setAttribute method as follows
        div.setAttribute('attributeKey', 'attributeValue)

In optimization, the first way of creating or setting attribute is done by locating the memory and bringing it and then overriding or assigning the value and returning back.
In the second way, it doesn't bring anything and directly makes the changes at the location. Hence, one round trip is reduced.